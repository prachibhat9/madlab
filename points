ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, sports);
        // Set the adapter on the ListView
        listView.setAdapter(adapter);
        // Set an OnItemClickListener to display a message when an item is clicked
        listView.setOnItemClickListener((parent, view, position, id) -> {
            // Get the selected sport
            String selectedSport = (String) parent.getItemAtPosition(position);

Button spt=findViewById(R.id.button);
        spt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                FragmentManager fragmentManager = getSupportFragmentManager();
                fragmentManager.beginTransaction()
                        .replace(R.id.fragmentContainerView, sports.class, null)
                        .setReorderingAllowed(true)
                        .addToBackStack("name") // Name can be null
                        .commit();
            }
        });

findViewById(R.id.changeModeButton).setOnClickListener(view -> {
            boolean newState = !toggleButton.isChecked();
            toggleButton.setChecked(newState);
            showToast(newState);
        });

ArrayList<String> selectedItems = new ArrayList<>();
        ArrayList<Integer> itemPrices = new ArrayList<>();
        if (pi.isChecked()) {
            selectedItems.add("Pizza");
            itemPrices.add(10);
      StringBuilder summary = new StringBuilder("Order Summary:\n");
    summary.append(selectedItems.get(i)).append(": $").append(itemPrices.get(i)).append("\n");
    private void disableCheckboxes() {
        pi.setEnabled(false);}
    destinationSpinner.setSelection(0);
            selectedDateTV.setText("");
            source = "";
            destination = "";
            tg.setChecked(false);

spinnerVehicleType = findViewById(R.id.spinnerVehicleType);
String vehicleType = spinnerVehicleType.getSelectedItem().toString();
Intent intent = new Intent(MainActivity.this, ConfirmationActivity.class); //under button listener
intent.putExtra("vehicleType", vehicleType);
startActivity(intent)
String vehicleType = getIntent().getStringExtra("vehicleType"); //next page

String[] items = {"Pizza", "Burger", "Pasta", "Sandwich", "Noodles"};
        int[] prices = {200, 100, 150, 80, 120};
 private HashMap<CheckBox, Integer> foodItems = new HashMap<>();
        for (int i = 0; i < items.length; i++) {
            CheckBox checkBox = new CheckBox(this);
            checkBox.setText(items[i]);
            foodItems.put(checkBox, prices[i]);
            foodLayout.addView(checkBox);
        }
//other method
ArrayList<String> selectedItems = new ArrayList<>();
for (CheckBox checkBox : foodItems.keySet()) {
                if (checkBox.isChecked()) {
                    String itemName = checkBox.getText().toString();
                    int itemPrice = foodItems.get(checkBox);
                    selectedItems.add(itemName);
                    selectedPrices.add(itemPrice);
                    totalCost += itemPrice;
                }
                checkBox.setEnabled(false);



final Calendar c = Calendar.getInstance();

                // on below line we are getting
                // our day, month and year.
                int year = c.get(Calendar.YEAR);
    DatePickerDialog datePickerDialog = new DatePickerDialog(
                        MainActivity.this,
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker view, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                // on below line we are setting date to our text view.
                                selectedDateTV.setText(dayOfMonth + "-" + (monthOfYear + 1) + "-" + year);

                            }
                        },
                        year, month, day);

                datePickerDialog.getDatePicker().setMinDate(c.getTimeInMillis());
                // at last we are calling show to
                // display our date picker dialog.
                datePickerDialog.show();
Spinner destinationSpinner = findViewById(R.id.spinner3);

        ArrayAdapter<String> ad = new ArrayAdapter<>(
                this,
                android.R.layout.simple_spinner_item,
                places
        );

ArrayList<String> selectedItems = new ArrayList<>();
        ad.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sourceSpinner.setAdapter(ad);
        destinationSpinner.setAdapter(ad);
source = sourceSpinner.getSelectedItem().toString();
ToggleButton tg = findViewById(R.id.toggleButton);
        tg.setOnCheckedChangeListener((buttonView, isChecked) -> {
            one_way = isChecked;

      private void openDatePicker() {
        Calendar calendar = Calendar.getInstance();
        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, year, month, dayOfMonth) -> {
                    String selectedDate = year + "-" + (month + 1) + "-" + dayOfMonth;
                    tvDatePicker.setText(selectedDate);
                },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.getDatePicker().setMinDate(calendar.getTimeInMillis());
        datePickerDialog.show();
    }

    private void openTimePicker() {
        Calendar calendar = Calendar.getInstance();
        TimePickerDialog timePickerDialog = new TimePickerDialog(this, (view, hourOfDay, minute) -> {
                    selectedHour = hourOfDay;
                    selectedMinute = minute;
                    String selectedTime = String.format("%02d:%02d", hourOfDay, minute);
                    tvTimePicker.setText(selectedTime);
                },
                calendar.get(Calendar.HOUR_OF_DAY),
                calendar.get(Calendar.MINUTE),
                true
        );
        timePickerDialog.show();
    }
if (item.getItemId() == R.id.action_contact) {
            Intent intent = new Intent(this, ContactUsActivity.class);
            startActivity(intent);
        } else if (item.getItemId() == R.id.action_about) {
            Intent intent = new Intent(this, AboutUsActivity.class);
            startActivity(intent);
        } else if (item.getItemId() == R.id.action_home) {
            if (!this.getClass().getSimpleName().equals("MainActivity")) {
                Intent intent = new Intent(this, MainActivity.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
                startActivity(intent);
                finish();
            }
public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the app bar.
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menuex, menu);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle menu item clicks
        if (item.getItemId() == R.id.action_contact) {
            Intent intent = new Intent(this, ContactUsActivity.class);
            startActivity(intent);
        } else if (item.getItemId() == R.id.action_about) {
            Intent intent = new Intent(this, AboutUsActivity.class);
            startActivity(intent);

 if (!name.isEmpty() && !date.isEmpty()) {
            dbHelper.insertTask(name, date, level);
            taskList.add(name + " - " + date + " - " + level);
            adapter.notifyDataSetChanged();
            taskName.setText("");
            dueDate.setText("");
            Toast.makeText(this, "Task Added", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
        }
dbHelper = new DBHelper(this);

taskListView.setOnItemLongClickListener((parent, view, position, id) -> {
            String task = taskList.get(position);
            dbHelper.deleteTask(task);
            taskList.remove(position);
            adapter.notifyDataSetChanged();
            Toast.makeText(MainActivity.this, "Task Deleted", Toast.LENGTH_SHORT).show();
            return true;
        });

////////////////////////////////////
public class MainActivity extends AppCompatActivity {

    EditText taskName, dueDate;
    Spinner priority;
    Button addButton;
    ListView taskListView;

    DBHelper dbHelper;
    ArrayAdapter<String> adapter;
    ArrayList<String> taskList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        taskName = findViewById(R.id.taskName);
        dueDate = findViewById(R.id.dueDate);
        priority = findViewById(R.id.priority);
        addButton = findViewById(R.id.addButton);
        taskListView = findViewById(R.id.taskListView);

        dbHelper = new DBHelper(this);
        taskList = new ArrayList<>();

        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, taskList);
        taskListView.setAdapter(adapter);

        // Populate spinner with priority levels
        ArrayAdapter<String> priorityAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, Arrays.asList("High", "Medium", "Low"));
        priorityAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        priority.setAdapter(priorityAdapter);

        loadTasks();

        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addTask();
            }
        });

        taskListView.setOnItemLongClickListener((parent, view, position, id) -> {
            String task = taskList.get(position);
            dbHelper.deleteTask(task);
            taskList.remove(position);
            adapter.notifyDataSetChanged();
            Toast.makeText(MainActivity.this, "Task Deleted", Toast.LENGTH_SHORT).show();
            return true;
        });
    }

    private void addTask() {
        String name = taskName.getText().toString();
        String date = dueDate.getText().toString();
        String level = priority.getSelectedItem().toString();

        if (!name.isEmpty() && !date.isEmpty()) {
            dbHelper.insertTask(name, date, level);
            taskList.add(name + " - " + date + " - " + level);
            adapter.notifyDataSetChanged();
            taskName.setText("");
            dueDate.setText("");
            Toast.makeText(this, "Task Added", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
        }
    }

    private void loadTasks() {
        Cursor cursor = dbHelper.getTasks();
        if (cursor.moveToFirst()) {
            do {
                String name = cursor.getString(1);
                String date = cursor.getString(2);
                String level = cursor.getString(3);
                taskList.add(name + " - " + date + " - " + level);
            } while (cursor.moveToNext());
        }
        cursor.close();
    }

    static class DBHelper extends SQLiteOpenHelper {

        private static final String DB_NAME = "tasks.db";
        private static final int DB_VERSION = 1;
        private static final String TABLE_NAME = "tasks";

        public DBHelper(Context context) {
            super(context, DB_NAME, null, DB_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, due_date TEXT, priority TEXT)");
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
            onCreate(db);
        }

        public void insertTask(String name, String date, String priority) {
            SQLiteDatabase db = this.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put("name", name);
            values.put("due_date", date);
            values.put("priority", priority);
            db.insert(TABLE_NAME, null, values);
            db.close();
        }

        public Cursor getTasks() {
            SQLiteDatabase db = this.getReadableDatabase();
            return db.rawQuery("SELECT * FROM " + TABLE_NAME, null);
        }

        public void deleteTask(String task) {
            SQLiteDatabase db = this.getWritableDatabase();
            String name = task.split(" - ")[0];
            db.delete(TABLE_NAME, "name = ?", new String[]{name});
            db.close();
        }
    }
}
//////////////////////
public class MainActivity extends AppCompatActivity {

    Spinner itemSpinner;
    Button addButton, calculateButton;
    TextView totalCostTextView;

    GroceryDBHelper dbHelper;
    ArrayAdapter<String> spinnerAdapter;
    ArrayList<String> itemList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        itemSpinner = findViewById(R.id.itemSpinner);
        addButton = findViewById(R.id.addButton);
        calculateButton = findViewById(R.id.calculateButton);
        totalCostTextView = findViewById(R.id.totalCostTextView);

        dbHelper = new GroceryDBHelper(this);

        itemList = new ArrayList<>();
        loadItems();

        spinnerAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, itemList);
        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        itemSpinner.setAdapter(spinnerAdapter);

        addButton.setOnClickListener(v -> addItem());

        calculateButton.setOnClickListener(v -> {
            int totalCost = dbHelper.getTotalCost();
            totalCostTextView.setText("Total Cost: " + totalCost);
        });
    }

    private void loadItems() {
        // Add sample items if database is empty
        if (dbHelper.getItemCount() == 0) {
            dbHelper.insertItem("Apple", 30);
            dbHelper.insertItem("Banana", 10);
            dbHelper.insertItem("Milk", 50);
            dbHelper.insertItem("Bread", 40);
        }

        Cursor cursor = dbHelper.getAllItems();
        if (cursor.moveToFirst()) {
            do {
                String itemName = cursor.getString(1);
                int itemCost = cursor.getInt(2);
                itemList.add(itemName + " - Rs." + itemCost);
            } while (cursor.moveToNext());
        }
        cursor.close();
    }

    private void addItem() {
        String selectedItem = (String) itemSpinner.getSelectedItem();
        if (selectedItem != null) {
            String[] parts = selectedItem.split(" - Rs.");
            String itemName = parts[0];

            dbHelper.addSelectedItem(itemName);
            Toast.makeText(this, "Item Added: " + itemName, Toast.LENGTH_SHORT).show();
        }
    }

    static class GroceryDBHelper extends SQLiteOpenHelper {

        private static final String DB_NAME = "grocery.db";
        private static final int DB_VERSION = 1;

        private static final String ITEM_TABLE = "items";
        private static final String SELECTED_ITEM_TABLE = "selected_items";

        public GroceryDBHelper(Context context) {
            super(context, DB_NAME, null, DB_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL("CREATE TABLE " + ITEM_TABLE + " (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, cost INTEGER)");
            db.execSQL("CREATE TABLE " + SELECTED_ITEM_TABLE + " (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)");
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + ITEM_TABLE);
            db.execSQL("DROP TABLE IF EXISTS " + SELECTED_ITEM_TABLE);
            onCreate(db);
        }

        public void insertItem(String name, int cost) {
            SQLiteDatabase db = this.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put("name", name);
            values.put("cost", cost);
            db.insert(ITEM_TABLE, null, values);
            db.close();
        }

        public Cursor getAllItems() {
            SQLiteDatabase db = this.getReadableDatabase();
            return db.rawQuery("SELECT * FROM " + ITEM_TABLE, null);
        }

        public int getItemCount() {
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.rawQuery("SELECT COUNT(*) FROM " + ITEM_TABLE, null);
            int count = 0;
            if (cursor.moveToFirst()) {
                count = cursor.getInt(0);
            }
            cursor.close();
            return count;
        }

        public void addSelectedItem(String name) {
            SQLiteDatabase db = this.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put("name", name);
            db.insert(SELECTED_ITEM_TABLE, null, values);
            db.close();
        }

        public int getTotalCost() {
            SQLiteDatabase db = this.getReadableDatabase();
            String query = "SELECT SUM(cost) FROM " + ITEM_TABLE + " WHERE name IN (SELECT name FROM " + SELECTED_ITEM_TABLE + ")";
            Cursor cursor = db.rawQuery(query, null);
            int total = 0;
            if (cursor.moveToFirst()) {
                total = cursor.getInt(0);
            }
            cursor.close();
            return total;
        }
    }
}
/////
